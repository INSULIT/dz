#include <iostream>
#include <cstring>

class Person {
private:
    char* name;
public:
    Person(const char* name = "Unknown") {
        this->name = new char[strlen(name) + 1];
        strcpy(this->name, name);
    }

    Person(const Person& other) {
        this->name = new char[strlen(other.name) + 1];
        strcpy(this->name, other.name);
    }

    ~Person() {
        delete[] name;
    }

    void print() const {
        std::cout << "Person: " << name << std::endl;
    }
};

class Apartment {
private:
    Person** residents;
    int numResidents;
public:
    Apartment(int numResidents = 0) : numResidents(numResidents) {
        residents = new Person*[numResidents];
        for (int i = 0; i < numResidents; ++i) {
            residents[i] = nullptr;
        }
    }

    Apartment(const Apartment& other) : numResidents(other.numResidents) {
        residents = new Person*[numResidents];
        for (int i = 0; i < numResidents; ++i) {
            if (other.residents[i] != nullptr) {
                residents[i] = new Person(*other.residents[i]);
            } else {
                residents[i] = nullptr;
            }
        }
    }

    ~Apartment() {
        for (int i = 0; i < numResidents; ++i) {
            delete residents[i];
        }
        delete[] residents;
    }

    void addResident(int index, const char* name) {
        if (index >= 0 && index < numResidents) {
            residents[index] = new Person(name);
        }
    }

    void print() const {
        for (int i = 0; i < numResidents; ++i) {
            if (residents[i] != nullptr) {
                residents[i]->print();
            } else {
                std::cout << "Empty slot" << std::endl;
            }
        }
    }
};

class House {
private:
    Apartment* apartments;
    int numApartments;
public:
    House(int numApartments = 0) : numApartments(numApartments) {
        apartments = new Apartment[numApartments];
    }

    House(const House& other) : numApartments(other.numApartments) {
        apartments = new Apartment[numApartments];
        for (int i = 0; i < numApartments; ++i) {
            apartments[i] = other.apartments[i];
        }
    }

    ~House() {
        delete[] apartments;
    }

    Apartment& getApartment(int index) {
        return apartments[index];
    }

    void print() const {
        for (int i = 0; i < numApartments; ++i) {
            std::cout << "Apartment " << i + 1 << ":" << std::endl;
            apartments[i].print();
        }
    }
};
